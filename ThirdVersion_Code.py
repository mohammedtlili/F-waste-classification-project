# -*- coding: utf-8 -*-
"""RaskelnyCode

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/110F9rkcdwLfK0zKjO45yoJkh-YvxXq-K
"""


#importation des biblioth√®ques
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense, BatchNormalization
from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from keras.utils.vis_utils import plot_model
from glob import glob
import cv2
from tqdm import tqdm
import warnings
warnings.filterwarnings('ignore')
import os
import h5py
from tensorflow import keras
from tensorflow.keras.utils import to_categorical
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D,Activation,BatchNormalization
import matplotlib.pyplot as plt
from tensorflow.keras.utils import plot_model



Train_path = '/content/drive/MyDrive/Colab Notebooks/Raskelny/DATASET/TRAIN'
Test_path = '/content/drive/MyDrive/Colab Notebooks/Raskelny/DATASET/TEST'

x_test = []
y_test = [] 

for category in glob(f'{Test_path}/*'):
    for file in tqdm(glob(category+'/*')):
        img_array=cv2.imread(file)
        img_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB)
        x_test.append(img_array) 
        y_test.append(category.split("/")[-1])


test=pd.DataFrame({'image': x_test,'label': y_test})

x_train = []
y_train = [] 

for category in glob(f'{Train_path}/*'):
    for file in tqdm(glob(category+'/*')):
        img_array=cv2.imread(file)
        img_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB)
        x_train.append(img_array) 
        y_train.append(category.split("/")[-1])


train=pd.DataFrame({'image': x_train,'label': y_train})

train.shape

train

test

fig, ax = plt.subplots(nrows=1, ncols=12, figsize=(20, 4))
for i in range(12):
  ax[i].imshow(x_train[i], cmap='gray')

plt.tight_layout()
plt.show()

from collections import Counter
Counter(y_train)

colors = ['#a0d157','#c48bb8']
plt.pie(train.label.value_counts(),startangle=90,explode=[0.05,0.05],autopct='%0.2f%%',
        labels=['NonRecyclable', 'Recyclable'], colors= colors,radius=2)
plt.show()

plt.figure(figsize=(20,15))
for i in range(5):
    plt.subplot(4,3,(i%12)+1)
    index=np.random.randint(50)
    plt.title('This image is of {0}'.format(train.label[index]),fontdict={'size':20,'weight':'bold'})
    plt.imshow(train.image[index])
    plt.tight_layout()

className = glob(f'{Train_path}/*')
numberOfClass = len(className)
print("Number Of Class: ",numberOfClass)

NUM_CLASSES = 2
#INPUT_SHAPE=x_train.shape[1:]
INPUT_SHAPE=np.shape(x_train[1])



##Convolutional Neural Network - CNN
from tensorflow.keras import regularizers
model = Sequential()
weight_decay = 1e-4
model.add(Conv2D(32,(3,3),input_shape = (64,64,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation("relu"))
model.add(MaxPooling2D())

model.add(Conv2D(64,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation("relu"))
model.add(MaxPooling2D())

model.add(Conv2D(128,(3,3),padding='same',kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation("relu"))
model.add(MaxPooling2D())

model.add(Flatten())
model.add(Dense(256))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(64))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(numberOfClass)) # output
model.add(Activation("softmax"))

model.compile(loss = "categorical_crossentropy",
              optimizer = "adam",
              metrics = ["accuracy"])

batch_size = 128

train_datagen = ImageDataGenerator(rescale= 1./255)
test_datagen = ImageDataGenerator(rescale= 1./255)
test_datagen

train_generator = train_datagen.flow_from_directory(
        Train_path, 
        target_size= (64,64),
        batch_size = batch_size,
        color_mode= "rgb",
        class_mode= "categorical")

test_generator = test_datagen.flow_from_directory(
        Test_path, 
        target_size= (64,64),
        batch_size = batch_size,
        color_mode= "rgb",
        class_mode= "categorical")

hist = model.fit_generator(
        generator = train_generator,
        epochs=9,
        validation_data = test_generator)

plt.figure(figsize=[10,6])
plt.plot(hist.history["accuracy"], label = "Train acc")
plt.plot(hist.history["val_accuracy"], label = "Validation acc")
plt.legend()
plt.show()

